options {
  static = false;
}

PARSER_BEGIN(Parser)

package kr.sgm.sql;

public class Parser {
  private static String PROMPT = "SQL_2009-11744> ";

  private static void print(String message) {
    System.out.print(PROMPT);
    System.out.println(message);
  }

  public static void main(String[] args) {
    while(true) {
      print("");
      Parser parser = new Parser(System.in);
      try {
        if(parser.Parse()) break;
      }catch(ParseException ex) {
        print("Syntax error");
      }
    }
  }
}

PARSER_END(Parser)

SKIP:
{
  " "
| "\t"
}

TOKEN:
{
  < EXIT: "exit" >
| < SEMICOLON: ";" >
| < EOL: "\r"|"\n"|"\r\n" >
}

TOKEN:
{
  < CREATE: "create" >
| < TABLE: "table" >
| < NOT: "not" >
| < NULL: "null" >
| < PRIMARY: "primary" >
| < KEY: "key" >
| < FOREIGN: "foreign" >
| < REFERENCES: "references" >
| < INT: "int" >
| < CHAR: "char" >
| < DATE: "date" >
| < DROP: "drop" >
| < SHOW: "show" >
| < TABLES: "tables" >
| < DESC: "desc" >
| < SELECT: "select" >
| < AS: "as" >
| < FROM: "from" >
| < WHERE: "where" >
| < OR: "or" >
| < AND: "and" >
| < IS: "is" >
| < INSERT: "insert" >
| < INTO: "into" >
| < VALUES: "values" >
| < DELETE: "delete" >
}

TOKEN:
{
  < LEGAL_IDENTIFIER: <ALPHABET>([<ALPHABET>,<UNDERSCORE>])* >
| < UNDER_SCORE: "_" >
| < LEFT_PAREN: "(" >
| < RIGHT_PAREN: ")" >
| < COMMA: "," >
| < STAR: "*" >
| < PERIOD: "." >
| < COMP_OP: "<"|">"|"="|"<="|">="|"!=" >
}

TOKEN:
{
  < CHAR_STRING: <QUOTE>(~["\'"])*<QUOTE> >
| < INT_VALUE: (<SIGN>)?(<DIGIT>)+ >
| < DIGIT: ["0"-"9"] >
| < SIGN: ["+","-"] >
| < DATE_VALUE: <NNNN>"-"<NN>"-"<NN> >
| < NNNN: <DIGIT><DIGIT><DIGIT><DIGIT> >
| < NN: <DIGIT><DIGIT> >
| < QUOTE: ["\'"] >
| < ALPHABET: ["a"-"z","A"-"Z"] >
}

boolean Parse():
{
  boolean exit;
}
{
  (
    Exit()
    { exit = true; }
  |
    QueryList()
    { exit = false; }
  )
  < EOL >
  { return exit; }
}

void Exit():
{}
{
  < EXIT >
  < SEMICOLON >
}

void QueryList():
{}
{
  (
    Query()
  )+
}

void Query():
{}
{
  CreateTable()
| DropTable()
| ShowTables()
| Describe()
| Select()
| Insert()
| Delete()
}

void CreateTable():
{}
{
  < CREATE >
  < TABLE >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  TableElementList()
  { print("\"create table\" requested"); }
}

void DropTable():
{}
{
  < DROP >
  < TABLE >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  { print("\"drop table\" requested"); }
}

void ShowTables():
{}
{
  < SHOW >
  < TABLES >
  { print("\"show tables\" requested"); }
}

void Describe():
{}
{
  < DESC >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  { print("\"desc\" requested"); }
}

void TableElementList():
{}
{
  < LEFT_PAREN >
  TableElement()
  (
    < COMMA >
    TableElement()
  )*
  < RIGHT_PAREN >
}

void TableElement():
{}
{
  ColumnDefinition()
| TableConstraintDefinition()
}

void ColumnDefinition():
{}
{
  < LEGAL_IDENTIFIER > // COLUMN_NAME
  DataType()
  (
    < NOT >
    < NULL >
  )?
}

void TableConstraintDefinition():
{}
{
  PrimaryKeyConstraint()
| ReferentialConstraint()
}

void DataType():
{}
{
  < INT >
|
  < CHAR >
  < LEFT_PAREN >
  < INT_VALUE >
  < RIGHT_PAREN >
|
  < DATE >
}

void PrimaryKeyConstraint():
{}
{
  < PRIMARY >
  < KEY >
  ColumnNameList()
}

void ReferentialConstraint():
{}
{
  < FOREIGN >
  < KEY >
  ColumnNameList()
  < REFERENCES >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  ColumnNameList()
}

void ColumnNameList():
{}
{
  < LEFT_PAREN >
  < LEGAL_IDENTIFIER > // COLUMN_NAME
  (
    < COMMA >
    < LEGAL_IDENTIFIER > // COLUMN_NAME
  )
  < RIGHT_PAREN >
}

void Select():
{}
{
  < SELECT >
  SelectList()
  TableExpression()
  { print("\"select\" requested"); }
}

void SelectList():
{}
{
  < STAR >
|
  (
    SelectedColumn()
    (
      < COMMA >
      SelectedColumn()
    )*
  )
}

void SelectedColumn():
{}
{
  (
    < LEGAL_IDENTIFIER > // TABLE_NAME
    < PERIOD >
  )?
  < LEGAL_IDENTIFIER > // COLUMN_NAME
  (
    < AS >
    < LEGAL_IDENTIFIER > // COLUMN_NAME
  )?
}

void TableExpression():
{}
{
  FromClause()
  (
    WhereClause()
  )?
}

void FromClause():
{}
{
  < FROM >
  TableReferenceList()
}

void TableReferenceList():
{}
{
  ReferedTable()
  (
    < COMMA >
    ReferedTable()
  )*
}

void ReferedTable():
{}
{
  < LEGAL_IDENTIFIER > // TABLE_NAME
  (
    < AS >
    < LEGAL_IDENTIFIER > // TABLE_NAME
  )?
}

void WhereClause():
{}
{
  < WHERE >
  BooleanValueExpression()
}

void BooleanValueExpression():
{}
{
  BooleanTerm()
|
  (
    BooleanTerm()
    < OR >
    BooleanValueExpression()
  )
}

void BooleanTerm():
{}
{
  BooleanFactor()
|
  (
    BooleanFactor()
    < OR >
    BooleanTerm()
  )
}

void BooleanFactor():
{}
{
  (
    < NOT >
  )?
  BooleanTest()
}

void BooleanTest():
{}
{
  Predicate()
|
  ParenthesizedBooleanExpression()
}

void ParenthesizedBooleanExpression():
{}
{
  < LEFT_PAREN >
  BooleanValueExpression()
  < RIGHT_PAREN >
}

void Predicate():
{}
{
  ComparisonPredicate()
| NullPredicate()
}

void ComparisonPredicate():
{}
{
  CompOperand()
  < COMP_OP >
  CompOperand()
}

void CompOperand():
{}
{
  ComparableValue()
|
  (
    < LEGAL_IDENTIFIER > // TABLE_NAME
    < PERIOD >
  )?
  < LEGAL_IDENTIFIER > // COLUMN_NAME
}

void ComparableValue():
{}
{
  < INT_VALUE >
| < CHAR_STRING >
| < DATE_VALUE >
}

void NullPredicate():
{}
{
  (
    < LEGAL_IDENTIFIER > // TABLE_NAME
    < PERIOD >
  )?
  < LEGAL_IDENTIFIER > // COLUMN_NAME
  NullOperation()
}

void NullOperation():
{}
{
  < IS >
  (
    < NOT >
  )?
  < NULL >
}

void Insert():
{}
{
  < INSERT >
  < INTO >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  InsertColumnsAndSource()
  { print("\"insert\" requested"); }
}

void InsertColumnsAndSource():
{}
{
  (
    ColumnNameList()
  )?
  ValueList()
}

void ValueList():
{}
{
  < VALUES >
  < LEFT_PAREN >
  Value()
  (
    < COMMA >
    Value()
  )*
  < RIGHT_PAREN >
}

void Value():
{}
{
  < NULL >
| ComparableValue()
}

void Delete():
{}
{
  < DELETE >
  < FROM >
  < LEGAL_IDENTIFIER > // TABLE_NAME
  (
    WhereClause()
  )?
  { print("\"delete\" requested"); }
}
