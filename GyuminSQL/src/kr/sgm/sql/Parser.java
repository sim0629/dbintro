/* Generated By:JavaCC: Do not edit this line. Parser.java */
package kr.sgm.sql;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;

public class Parser implements ParserConstants {
  // 키워드 목록
  //  식별자에 포함되지 않는지 확인하기 위해 사용된다.
  //  아래의 Keywords 토큰과 같은 집합을 유지해야한다.
  private static ArrayList<String> Keywords =
    new ArrayList<String>(
      Arrays.asList(
        "exit",
        "create",
        "table",
        "not",
        "null",
        "primary",
        "key",
        "foreign",
        "references",
        "int",
        "char",
        "date",
        "drop",
        "show",
        "tables",
        "desc",
        "select",
        "as",
        "from",
        "where",
        "or",
        "and",
        "is",
        "insert",
        "into",
        "values",
        "delete"
      )
    );

  // 식별자가 키워드 목록에 포함되는지 검사한다.
  // 대소문자 구분없이 비교한다.
  private static boolean isKeyword(String identifier) {
    return Keywords.contains(identifier);
  }

  private static java.text.SimpleDateFormat dateFormat =
    new java.text.SimpleDateFormat("yyyy-MM-dd");

  static {
    // 형식이 잘못된 입력에 대해 parse할 때
    // ParseException을 내도록 설정 한다.
    dateFormat.setLenient(false);
  }

  final public boolean Parse(ArrayList<BaseQuery> results) throws ParseException {
  boolean exit;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXIT:
      jj_consume_token(EXIT);
      exit = true;
      break;
    case CREATE:
    case DROP:
    case SHOW:
    case DESC:
    case SELECT:
    case INSERT:
    case DELETE:
      QueryList(results);
      exit = false;
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOP);
    {if (true) return exit;}
    throw new Error("Missing return statement in function");
  }

  final public void QueryList(ArrayList<BaseQuery> results) throws ParseException {
  BaseQuery result;
    result = Query();
    results.add(result);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      result = Query();
      results.add(result);
    }
  }

  final public BaseQuery Query() throws ParseException {
  BaseQuery result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      result = CreateTable();
      break;
    case DROP:
      result = DropTable();
      break;
    case SHOW:
      result = ShowTables();
      break;
    case DESC:
      result = Describe();
      break;
    case SELECT:
      result = Select();
      break;
    case INSERT:
      result = Insert();
      break;
    case DELETE:
      result = Delete();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableQuery CreateTable() throws ParseException {
  CreateTableQuery query = new CreateTableQuery();
  String tableName;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tableName = LegalIdentifier();
    query.setTableName(tableName);
    TableElementList(query);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public DropTableQuery DropTable() throws ParseException {
  DropTableQuery query = new DropTableQuery();
  String tableName;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tableName = LegalIdentifier();
    query.setTableName(tableName);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public ShowTablesQuery ShowTables() throws ParseException {
  ShowTablesQuery query = new ShowTablesQuery();
    jj_consume_token(SHOW);
    jj_consume_token(TABLES);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public DescribeQuery Describe() throws ParseException {
  DescribeQuery query = new DescribeQuery();
  String tableName;
    jj_consume_token(DESC);
    tableName = LegalIdentifier();
    query.setTableName(tableName);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public void TableElementList(CreateTableQuery query) throws ParseException {
    jj_consume_token(LEFT_PAREN);
    TableElement(query);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      TableElement(query);
    }
    jj_consume_token(RIGHT_PAREN);
  }

  final public void TableElement(CreateTableQuery query) throws ParseException {
  QueryColumnDefinition columnDefinition;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition = ColumnDefinition();
    query.addColumnDefinition(columnDefinition);
      break;
    case PRIMARY:
    case FOREIGN:
      TableConstraintDefinition(query);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public QueryColumnDefinition ColumnDefinition() throws ParseException {
  String columnName;
  QueryDataType dataType;
  boolean nullable = true;
    columnName = LegalIdentifier();
    dataType = DataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
      nullable = false;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return new QueryColumnDefinition(
      columnName,
      dataType,
      nullable
    );}
    throw new Error("Missing return statement in function");
  }

  final public void TableConstraintDefinition(CreateTableQuery query) throws ParseException {
  QueryPrimaryKeyConstraint primaryKeyConstraint;
  QueryReferentialConstraint referentialConstraint;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY:
      primaryKeyConstraint = PrimaryKeyConstraint();
    query.addPrimaryKeyConstraint(primaryKeyConstraint);
      break;
    case FOREIGN:
      referentialConstraint = ReferentialConstraint();
    query.addReferentialConstraint(referentialConstraint);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public QueryDataType DataType() throws ParseException {
  QueryDataType result;
  int length;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      result = QueryDataType.createInt();
      break;
    case CHAR:
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      length = IntValue();
      jj_consume_token(RIGHT_PAREN);
      result = QueryDataType.createChar(length);
      break;
    case DATE:
      jj_consume_token(DATE);
      result = QueryDataType.createDate();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public QueryPrimaryKeyConstraint PrimaryKeyConstraint() throws ParseException {
  ArrayList<String> columnNames;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    columnNames = ColumnNameList();
    {if (true) return new QueryPrimaryKeyConstraint(columnNames);}
    throw new Error("Missing return statement in function");
  }

  final public QueryReferentialConstraint ReferentialConstraint() throws ParseException {
  ArrayList<String> ourColumnNames;
  String theirTableName;
  ArrayList<String> theirColumnNames;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    ourColumnNames = ColumnNameList();
    jj_consume_token(REFERENCES);
    theirTableName = LegalIdentifier();
    theirColumnNames = ColumnNameList();
    {if (true) return new QueryReferentialConstraint(
      ourColumnNames,
      theirTableName,
      theirColumnNames
    );}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> ColumnNameList() throws ParseException {
  ArrayList<String> columnNames = new ArrayList<String>();
  String columnName;
    jj_consume_token(LEFT_PAREN);
    columnName = LegalIdentifier();
    columnNames.add(columnName);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName = LegalIdentifier();
      columnNames.add(columnName);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return columnNames;}
    throw new Error("Missing return statement in function");
  }

  final public SelectQuery Select() throws ParseException {
  SelectQuery query = new SelectQuery();
    jj_consume_token(SELECT);
    SelectList(query);
    TableExpression(query);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public void SelectList(SelectQuery query) throws ParseException {
  QuerySelectedColumn selectedColumn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    case LEGAL_IDENTIFIER:
      selectedColumn = SelectedColumn();
      query.addSelectedColumn(selectedColumn);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        selectedColumn = SelectedColumn();
        query.addSelectedColumn(selectedColumn);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public QuerySelectedColumn SelectedColumn() throws ParseException {
  String tableName = null;
  String columnName;
  String alias = null;
    if (jj_2_1(2)) {
      tableName = LegalIdentifier();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName = LegalIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      alias = LegalIdentifier();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return new QuerySelectedColumn(tableName, columnName, alias);}
    throw new Error("Missing return statement in function");
  }

  final public void TableExpression(SelectQuery query) throws ParseException {
  QueryBooleanValueExpression where;
    FromClause(query);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = WhereClause();
      query.setWhere(where);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void FromClause(SelectQuery query) throws ParseException {
    jj_consume_token(FROM);
    TableReferenceList(query);
  }

  final public void TableReferenceList(SelectQuery query) throws ParseException {
  QueryReferedTable referedTable;
    referedTable = ReferedTable();
    query.addReferedTable(referedTable);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      referedTable = ReferedTable();
      query.addReferedTable(referedTable);
    }
  }

  final public QueryReferedTable ReferedTable() throws ParseException {
  String tableName;
  String alias = null;
    tableName = LegalIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      alias = LegalIdentifier();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    {if (true) return new QueryReferedTable(tableName, alias);}
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanValueExpression WhereClause() throws ParseException {
  QueryBooleanValueExpression where;
    jj_consume_token(WHERE);
    where = BooleanValueExpression();
    {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanValueExpression BooleanValueExpression() throws ParseException {
  QueryBooleanValueExpression x = new QueryBooleanValueExpression();
  QueryBooleanTerm a;
    a = BooleanTerm();
    x.add(a);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      a = BooleanTerm();
      x.add(a);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanTerm BooleanTerm() throws ParseException {
  QueryBooleanTerm x = new QueryBooleanTerm();
  QueryBooleanFactor a;
    a = BooleanFactor();
    x.add(a);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      a = BooleanFactor();
      x.add(a);
    }
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanFactor BooleanFactor() throws ParseException {
  QueryBooleanFactor x = new QueryBooleanFactor();
  QueryBooleanTest t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      x.setNot(true);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    t = BooleanTest();
    x.setTest(t);
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanTest BooleanTest() throws ParseException {
  QueryPredicate p;
  QueryBooleanValueExpression x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
    case CHAR_STRING:
    case INT_VALUE:
    case DATE_VALUE:
      p = Predicate();
    {if (true) return p;}
      break;
    case LEFT_PAREN:
      x = ParenthesizedBooleanExpression();
    {if (true) return x;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public QueryBooleanValueExpression ParenthesizedBooleanExpression() throws ParseException {
  QueryBooleanValueExpression x;
    jj_consume_token(LEFT_PAREN);
    x = BooleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
    {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public QueryPredicate Predicate() throws ParseException {
  QueryNullPredicate np;
  QueryComparisonPredicate cp;
    if (jj_2_2(4)) {
      np = NullPredicate();
    {if (true) return np;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
      case CHAR_STRING:
      case INT_VALUE:
      case DATE_VALUE:
        cp = ComparisonPredicate();
    {if (true) return cp;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public QueryComparisonPredicate ComparisonPredicate() throws ParseException {
  QueryComparisonPredicate p = new QueryComparisonPredicate();
  Token t;
    CompOperand(p, true);
    t = jj_consume_token(COMP_OP);
    p.setOperator(t.image);
    CompOperand(p, false);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public void CompOperand(QueryComparisonPredicate p, boolean left) throws ParseException {
  QueryComparableValue value;
  String tableName, columnName;
  QueryComparableOperand operand = new QueryComparableOperand();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR_STRING:
    case INT_VALUE:
    case DATE_VALUE:
      value = ComparableValue();
    if(left) p.setLhsValue(value); else p.setRhsValue(value);
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tableName = LegalIdentifier();
      operand.setTableName(tableName);
        jj_consume_token(PERIOD);
      } else {
        ;
      }
      columnName = LegalIdentifier();
    operand.setColumnName(columnName);
    if(left) p.setLhsOperand(operand); else p.setRhsOperand(operand);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public QueryComparableValue ComparableValue() throws ParseException {
  QueryComparableValue value;
  int i;
  String s;
  Date d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      i = IntValue();
      value = QueryComparableValue.fromInt(i);
      break;
    case CHAR_STRING:
      s = CharString();
      value = QueryComparableValue.fromString(s);
      break;
    case DATE_VALUE:
      d = DateValue();
      value = QueryComparableValue.fromDate(d);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public QueryNullPredicate NullPredicate() throws ParseException {
  QueryNullPredicate p = new QueryNullPredicate();
  String tableName, columnName;
  QueryComparableOperand operand = new QueryComparableOperand();
  boolean not;
    if (jj_2_4(2)) {
      tableName = LegalIdentifier();
      operand.setTableName(tableName);
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName = LegalIdentifier();
    operand.setColumnName(columnName);
    not = NullOperation();
    p.setOperand(operand);
    p.setNot(not);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public boolean NullOperation() throws ParseException {
  boolean not = false;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      not = true;
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
    {if (true) return not;}
    throw new Error("Missing return statement in function");
  }

  final public InsertQuery Insert() throws ParseException {
  InsertQuery query = new InsertQuery();
  String tableName;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tableName = LegalIdentifier();
    query.setTableName(tableName);
    InsertColumnsAndSource(query);
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public void InsertColumnsAndSource(InsertQuery query) throws ParseException {
  ArrayList<String> columnNames;
  ArrayList<String> values;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      columnNames = ColumnNameList();
      query.setColumnNames(columnNames);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    ValueList(query);
  }

  final public void ValueList(InsertQuery query) throws ParseException {
  QueryComparableValue value;
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value = Value();
    query.addValue(value);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      value = Value();
      query.addValue(value);
    }
    jj_consume_token(RIGHT_PAREN);
  }

  final public QueryComparableValue Value() throws ParseException {
  QueryComparableValue value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
    {if (true) return null;}
      break;
    case CHAR_STRING:
    case INT_VALUE:
    case DATE_VALUE:
      value = ComparableValue();
    {if (true) return value;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public DeleteQuery Delete() throws ParseException {
  DeleteQuery query = new DeleteQuery();
  String tableName;
  QueryBooleanValueExpression where;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    tableName = LegalIdentifier();
    query.setTableName(tableName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = WhereClause();
      query.setWhere(where);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    {if (true) return query;}
    throw new Error("Missing return statement in function");
  }

  final public String LegalIdentifier() throws ParseException {
  Token t;
    t = jj_consume_token(LEGAL_IDENTIFIER);
    String identifier = t.image.toLowerCase();
    // 식별자가 키워드일 경우 예외를 발생한다.
    // 키워드 토큰은 대소문자 구분을 해서 소문자만 되지만
    // 식별자는 대소문자 구분을 하지 않으므로
    // 이러한 예외처리가 필요하다.
    if(isKeyword(identifier))
      {if (true) throw new ParseException();}
    {if (true) return identifier;}
    throw new Error("Missing return statement in function");
  }

  final public int IntValue() throws ParseException {
  Token t;
    t = jj_consume_token(INT_VALUE);
    try {
      {if (true) return Integer.parseInt(t.image);}
    }catch(NumberFormatException ex) {
      // INT_VALUE 토큰의 정의에 의해
      // 이 예외가 발생하는 경우는
      // int 값이 32bit를 넘어갈 때이다.
      {if (true) throw new ParseException();}
    }
    throw new Error("Missing return statement in function");
  }

  final public String CharString() throws ParseException {
  Token t;
    t = jj_consume_token(CHAR_STRING);
    {if (true) return t.image.substring(
      1,
      t.image.length() - 1
    );}
    throw new Error("Missing return statement in function");
  }

  final public Date DateValue() throws ParseException {
  Token t;
    t = jj_consume_token(DATE_VALUE);
    try {
      {if (true) return dateFormat.parse(t.image);}
    }catch(java.text.ParseException ex) {
      // 날짜 범위가 잘못되면 null을 리턴한다.
      // BaseQuery.run에서 예외를 잘 발생해줘야 한다.
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40d80180,0x40,0x40d80100,0x0,0x5000,0x400,0x5000,0x70000,0x0,0x0,0x0,0x1000000,0x4000000,0x0,0x1000000,0x8000000,0x10000000,0x400,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x800,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x0,0x2,0x40,0x4,0x0,0x0,0x0,0x40,0x40,0x84,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x4c14,0x4c04,0x4c04,0x4c00,0x0,0x10,0x40,0x4c00,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
